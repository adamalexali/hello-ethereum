{"version":3,"sources":["App.js","index.js"],"names":["App","useState","currentAccount","setCurrentAccount","allInteractions","setInteractions","message","setMessage","contractABI","abi","getAllInteractions","a","window","ethereum","provider","ethers","providers","Web3Provider","signer","getSigner","myContract","Contract","interactions","interactionsCleaned","forEach","interaction","push","address","actor","timestamp","Date","console","log","walletConnectionCheck","request","method","accounts","length","account","connectWallet","alert","interact","getTotalInteractions","count","toNumber","interactTxn","hash","wait","location","reload","useEffect","className","name","id","placeholder","cols","rows","onChange","e","target","value","onClick","map","index","key","href","toString","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8008921f.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport './App.css';\nimport abi from './utils/HelloEthereum.json';\n\nconst App = () => {\n  // state variable to store user's public wallet\n  const [currentAccount, setCurrentAccount] = useState('');\n  const [allInteractions, setInteractions] = useState([]);\n\n  const [message, setMessage] = useState('');\n\n  const contractAddress = '0x5F2fA4c3F04C29B58E99D5E8F7caFd64607bf815';\n  const contractABI = abi.abi;\n\n  const getAllInteractions = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const myContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          signer\n        );\n\n        const interactions = await myContract.getAllInteractions();\n\n        let interactionsCleaned = [];\n        interactions.forEach((interaction) => {\n          interactionsCleaned.push({\n            address: interaction.actor,\n            message: interaction.message,\n            timestamp: new Date(interaction.timestamp * 1000),\n          });\n        });\n        setInteractions(interactionsCleaned);\n        console.log(interactions);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const walletConnectionCheck = async () => {\n    try {\n      // we need access to window.ethereum\n      const { ethereum } = window;\n      if (!ethereum) {\n        console.log('Make sure you have Metamask installed!');\n        return;\n      } else {\n        console.log('We have the ethereum object', ethereum);\n      }\n\n      // check if we are authorized to access user's wallet\n      const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log('Found an authorized account:', account);\n        setCurrentAccount(account);\n        getAllInteractions();\n      } else {\n        console.log('No authorized account found.');\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // implementing connectWallet method\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert('Please install Metamask before proceeding.');\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts',\n      });\n\n      console.log('Connected', accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const interact = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const myContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          signer\n        );\n\n        let count = await myContract.getTotalInteractions();\n        console.log('Retrieved total interactions…', count.toNumber());\n\n        // execute interaction from smart contract\n        const interactTxn = await myContract.interact(message);\n        console.log('Mining…', interactTxn.hash);\n\n        await interactTxn.wait();\n        console.log('Mined—', interactTxn.hash);\n\n        count = await myContract.getTotalInteractions();\n        console.log('Retrieved total interactions…', count.toNumber());\n        window.location.reload();\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    walletConnectionCheck();\n  }, []);\n\n  // Listen in for emitter events!\n  // useEffect(() => {\n  //   let myContract;\n\n  //   const onNewInteraction = (actor, timestamp, message) => {\n  //     console.log('NewInteraction', actor, timestamp, message);\n  //     setInteractions((prevState) => [\n  //       ...prevState,\n  //       {\n  //         address: actor,\n  //         timestamp: new Date(timestamp * 1000),\n  //         message: message,\n  //       },\n  //     ]);\n  //   };\n\n  //   if (window.ethereum) {\n  //     const provider = new ethers.providers.Web3Provider(window.ethereum);\n  //     const signer = provider.getSigner();\n\n  //     myContract = new ethers.Contract(contractAddress, contractABI, signer);\n  //     myContract.on('NewInteraction', onNewInteraction);\n  //   }\n\n  //   return () => {\n  //     if (myContract) {\n  //       myContract.off('NewInteraction', onNewInteraction);\n  //     }\n  //   };\n  // }, []);\n\n  return (\n    <div className='mainContainer'>\n      <div className='dataContainer'>\n        <h1 className='header'>hello ethereum</h1>\n        <h2 className='subheader'>Connect your Ethereum wallet to post!</h2>\n        <textarea\n          name='message'\n          id='msgTextArea'\n          placeholder='Enter a message'\n          cols='5'\n          rows='5'\n          onChange={(e) => setMessage(e.target.value)}\n        />\n        <button className='InteractButton' onClick={interact}>\n          Post\n        </button>\n        {/* if there is no currentAccount render this button */}\n        {!currentAccount && (\n          <button className='InteractButton' onClick={connectWallet}>\n            Connect Wallet\n          </button>\n        )}\n\n        {allInteractions.map((interaction, index) => {\n          return (\n            <div key={index} className='messageCard'>\n              <h3 className='message'>\n                <span className='address'>Address:</span>{' '}\n                <a\n                  href={`http://rinkeby.etherscan.io/address/${interaction.address}`}\n                >\n                  {interaction.address}\n                </a>\n              </h3>\n              <h4 className='message timestamp'>\n                Time: {interaction.timestamp.toString()}\n              </h4>\n              <p className='message messageBody'>{interaction.message}</p>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}